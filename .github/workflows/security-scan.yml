name: Security Scan (SAST & DAST)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  get-changed-files:
    name: Get Changed Files
    runs-on: ubuntu-latest
    outputs:
      python_changes: ${{ steps.filter.outputs.python_files }}
      java_changes: ${{ steps.filter.outputs.java_files }}
      all_changes: ${{ steps.filter.outputs.all_files }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: filter
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} | tr '\n' ' ')
          else
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | tr '\n' ' ')
          fi
          
          # Filter files by type
          PYTHON_FILES=$(echo "$CHANGED_FILES" | tr ' ' '\n' | grep -E '\.py$' | tr '\n' ' ' || echo '')
          JAVA_FILES=$(echo "$CHANGED_FILES" | tr ' ' '\n' | grep -E '\.java$' | tr '\n' ' ' || echo '')
          
          # Set outputs with proper formatting
          echo "python_files=$PYTHON_FILES" >> $GITHUB_OUTPUT
          echo "java_files=$JAVA_FILES" >> $GITHUB_OUTPUT
          echo "all_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Changed files: $CHANGED_FILES"
          echo "Python files: $PYTHON_FILES"
          echo "Java files: $JAVA_FILES"

  bearer-scan:
    name: Bearer Java SAST Scan
    needs: get-changed-files
    if: needs.get-changed-files.outputs.java_changes != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install and Run Bearer Scanner
        run: |
          # Install Bearer
          curl -sfL https://raw.githubusercontent.com/Bearer/bearer/main/contrib/install.sh | sh
          # Run Bearer scan
          bearer scan . --format=text --output=bearer-report.txt
          bearer scan . --format=sarif --output=bearer-results.sarif

      - name: Upload Bearer Results
        uses: actions/upload-artifact@v4
        with:
          name: bearer-scan-results
          path: |
            bearer-report.txt
            bearer-results.sarif
          retention-days: 90

  bandit-scan:
    name: Bandit SAST Scan
    needs: get-changed-files
    if: needs.get-changed-files.outputs.python_changes != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit SAST scan
        run: |
          echo "=== Python Security Scan with Bandit ===" | tee bandit-report.txt
          echo "Scanning changed files: ${{ needs.get-changed-files.outputs.python_changes }}" | tee -a bandit-report.txt
          for file in ${{ needs.get-changed-files.outputs.python_changes }}; do
            echo "Scanning $file..." | tee -a bandit-report.txt
            bandit -r "$file" -f json -o "bandit-$file.json" --exit-zero || true
            bandit -r "$file" -f txt --exit-zero | tee -a bandit-report.txt || true
          done
          echo "========================================" | tee -a bandit-report.txt

      - name: Upload Bandit Results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-scan-results
          path: |
            bandit-report.txt
            bandit-*.json
          retention-days: 90

  trivy-scan:
    name: Trivy SAST Scan
    needs: get-changed-files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      - name: Run Trivy Scan
        run: |
          echo "=== Running Trivy Vulnerability Scan ===" > trivy-report.txt
          trivy fs --skip-dirs .git/ \
                   --skip-files ".github/workflows/*.yml" \
                   --format json \
                   --output trivy-results.json \
                   --scanners vuln \
                   --severity HIGH,CRITICAL \
                   --exit-code 0 \
                   .
          
          echo "=== Trivy Scan Results ===" >> trivy-report.txt
          if [ -f "trivy-results.json" ]; then
            jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | "[\(.Severity)] \(.VulnerabilityID): \(.Title)"' trivy-results.json >> trivy-report.txt 2>/dev/null || echo "No vulnerabilities found" >> trivy-report.txt
          fi
          echo "=========================" >> trivy-report.txt

      - name: Upload Trivy Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: |
            trivy-report.txt
            trivy-results.json
          retention-days: 90

  zap-scan:
    name: ZAP DAST Scan
    needs: get-changed-files
    if: needs.get-changed-files.outputs.python_changes != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Flask
        run: |
          python -m pip install --upgrade pip
          pip install flask

      - name: Start Flask App
        run: |
          cd python_wordstop
          export FLASK_APP=wordstop.py
          export FLASK_ENV=development
          export FLASK_DEBUG=0
          python -m flask run --host=0.0.0.0 > flask.log 2>&1 &
          echo "Waiting for Flask to start..."
          sleep 5
          for i in {1..30}; do
            if curl -s http://localhost:5000 > /dev/null 2>&1; then
              echo "Flask app is running!"
              cat flask.log
              break
            fi
            echo "Attempt $i: Waiting for Flask to start..."
            sleep 2
            if [ $i -eq 30 ]; then
              echo "Flask failed to start. Log output:"
              cat flask.log
              exit 1
            fi
          done

      - name: Create ZAP Configuration
        run: |
          # Create ZAP hook script
          cat > zap-hook.py << EOL
          def zap_started(zap, target):
              # Ignore common alerts for demo
              zap.alertfilter.add_alertfilter(
                  alertid="10036",
                  url_is_regex="true",
                  url=".*",
                  enabled="true")
              zap.alertfilter.add_alertfilter(
                  alertid="10055",
                  url_is_regex="true",
                  url=".*",
                  enabled="true")
              zap.alertfilter.add_alertfilter(
                  alertid="10106",
                  url_is_regex="true",
                  url=".*",
                  enabled="true")
              zap.alertfilter.add_alertfilter(
                  alertid="90004",
                  url_is_regex="true",
                  url=".*",
                  enabled="true")
          EOL

      - name: Run ZAP Scan
        continue-on-error: true  # Continue even if vulnerabilities are found
        run: |
          docker pull ghcr.io/zaproxy/zaproxy:stable
          docker run --network host \
            -v ${PWD}:/zap/wrk/:rw \
            --user root \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py \
            -t http://localhost:5000 \
            -J zap-report.json \
            -x zap-report.xml \
            -r zap-report.html \
            --hook=/zap/wrk/zap-hook.py \
            -z "-config api.disablekey=true -config scanner.attackOnStart=true -config scanner.threadPerHost=5"

      - name: Generate ZAP Report
        if: always()  # Run even if ZAP scan "fails" due to findings
        run: |
          echo "=== ZAP DAST Scan Results ===" > zap-summary.txt
          if [ -f "zap-report.json" ]; then
            echo "Found issues:" >> zap-summary.txt
            jq -r '.site[].alerts[] | "[\(.risk)] \(.name): \(.description)"' zap-report.json >> zap-summary.txt 2>/dev/null || echo "No issues found or invalid report format" >> zap-summary.txt
          else
            echo "ZAP scan completed but no report file was generated" >> zap-summary.txt
          fi
          echo "===============================" >> zap-summary.txt
          cat zap-summary.txt

      - name: Upload ZAP Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-results
          path: |
            zap-summary.txt
            zap-report.*
          retention-days: 90
