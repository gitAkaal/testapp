name: Security Scan (SAST & DAST)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  get-changed-files:
    name: Get Changed Files
    runs-on: ubuntu-latest
    outputs:
      python_changes: ${{ steps.filter.outputs.python_files }}
      java_changes: ${{ steps.filter.outputs.java_files }}
      all_changes: ${{ steps.filter.outputs.all_files }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: filter
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For pull requests, compare with the base branch
            CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }})
          else
            # For pushes, compare with the previous commit
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          fi
          
          # Filter files by type
          PYTHON_FILES=$(echo "$CHANGED_FILES" | grep -E '\.py$' || true)
          JAVA_FILES=$(echo "$CHANGED_FILES" | grep -E '\.java$' || true)
          
          # Set outputs
          echo "python_files=${PYTHON_FILES}" >> $GITHUB_OUTPUT
          echo "java_files=${JAVA_FILES}" >> $GITHUB_OUTPUT
          echo "all_files=${CHANGED_FILES}" >> $GITHUB_OUTPUT

  bearer-scan:
    name: Bearer Java SAST Scan
    needs: get-changed-files
    if: needs.get-changed-files.outputs.java_changes != ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Run Bearer Scanner
        uses: bearer/bearer-action@v2
        with:
          config: |
            {
              "technology": ["java"],
              "severity": ["CRITICAL", "HIGH", "MEDIUM"],
              "detail": true,
              "format": "text",
              "scanners": ["sast", "secrets", "dependency"]
            }
          report-url: false
          input-dir: ${{ needs.get-changed-files.outputs.java_changes }}
          fail-on-findings: false

      - name: Print Bearer Summary
        run: |
          echo "=== Bearer Java Security Scan Complete ==="
          echo "Check the logs above for detailed results."
          echo "========================================"

  bandit-scan:
    name: Bandit SAST Scan
    needs: get-changed-files
    if: needs.get-changed-files.outputs.python_changes != ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit SAST scan
        run: |
          echo "=== Python Security Scan with Bandit ==="
          echo "Scanning changed files: ${{ needs.get-changed-files.outputs.python_changes }}"
          for file in ${{ needs.get-changed-files.outputs.python_changes }}; do
            echo "Scanning $file..."
            bandit -r "$file" -f txt --exit-zero || true
          done
          echo "========================================"   trivy-scan:
    name: Trivy SAST Scan
    needs: get-changed-files
    if: needs.get-changed-files.outputs.all_changes != ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v3

    # SAST Scan with Trivy
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: ${{ needs.get-changed-files.outputs.all_changes }}
        format: 'table'
        output: '/dev/stdout'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'
    
    # Print Trivy Summary
    - name: Print Trivy Scan Summary
      run: |
        echo "Trivy scan completed. Check the logs above for results."

  zap-scan:
    name: ZAP DAST Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v3

    # Setup Python and start Flask app
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Flask
      run: |
        python -m pip install --upgrade pip
        pip install flask

    - name: Start Flask App
      run: |
        cd python_wordstop
        export FLASK_APP=wordstop.py
        export FLASK_ENV=development
        export FLASK_DEBUG=0
        python -m flask run --host=0.0.0.0 > flask.log 2>&1 &
        echo "Waiting for Flask to start..."
        sleep 5  # Give Flask some time to initialize
        for i in {1..30}; do
          if curl -s http://localhost:5000 > /dev/null 2>&1; then
            echo "Flask app is running!"
            cat flask.log
            break
          fi
          echo "Attempt $i: Waiting for Flask to start..."
          sleep 2
          if [ $i -eq 30 ]; then
            echo "Flask failed to start. Log output:"
            cat flask.log
            exit 1
          fi
        done

    # Run OWASP ZAP DAST Scan with Full Active and Passive Scanning
    - name: Run ZAP Full Scan
      run: |
        docker pull ghcr.io/zaproxy/zaproxy:stable
        docker run --network host \
          -v ${PWD}:/zap/wrk/:rw \
          --user root \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-full-scan.py \
          -t http://localhost:5000 \
          -I \
          -j \
          -m 10 \
          -z "-config api.disablekey=true -config scanner.attackOnStart=true -config scanner.threadPerHost=5 -config view.mode=attack -config api.addrs.addr.regex=true -config api.addrs.addr.name=.* -config database.recoverylog=false -addoninstall ascanrulesAlpha -addoninstall ascanrulesBeta"

    # Print ZAP Summary
    - name: Print ZAP Scan Summary
      run: |
        echo "ZAP DAST scan completed. Check the logs above for results."
