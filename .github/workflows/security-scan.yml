name: Security Scan (SAST & DAST)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-scanning:
    runs-on: ubuntu-latest
    permissions:
      security-events: write    # Required for uploading SARIF results
      actions: read            # Required for reading workflow info
      contents: read          # Required for checking out code
    
    steps:
    - uses: actions/checkout@v3

    # Setup Python and Java
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Install Dependencies
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask

    # Build and start applications
    - name: Build and start Python app
      run: |
        cd python_wordstop
        nohup python wordstop.py > flask.log 2>&1 &
        echo "Waiting for Python app to start..."
        # Wait for the app to be ready
        for i in {1..30}; do
          if curl -s http://localhost:5000 > /dev/null; then
            echo "Application is up!"
            break
          fi
          echo "Waiting for application... ($i/30)"
          sleep 2
        done
        # Check if app is really running
        curl -v http://localhost:5000
        if [ $? -ne 0 ]; then
          echo "Application failed to start"
          cat flask.log
          exit 1
        fi

    # SAST Scan with Trivy
    - name: Run Trivy vulnerability scanner in fs mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    # Upload Trivy scan results to GitHub Security tab
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        category: trivy-results

    # Run OWASP ZAP DAST Scan
    - name: ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.9.0
      with:
        target: 'http://localhost:5000'
        fail_action: false
        cmd_options: '-I'
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
        allow_issue_writing: false

    # Generate Security Report
    - name: Generate Security Report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "## SAST Findings (Trivy)" >> security-report.md
        if [ -f trivy-results.sarif ]; then
          echo "\`\`\`" >> security-report.md
          cat trivy-results.sarif | jq -r '.runs[].results[] | "- " + .ruleId + ": " + .message.text' >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
        echo "## DAST Findings (OWASP ZAP)" >> security-report.md
        if [ -f zap-baseline-report.md ]; then
          cat zap-baseline-report.md >> security-report.md
        fi

    # Upload Security Report
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          security-report.md
          trivy-results.sarif
          zap-*-report.*
