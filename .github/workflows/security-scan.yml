name: Security Scan (SAST & DAST)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security-scanning:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    # Setup Python and Java
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # Install Dependencies
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask

    # Build and start applications
    - name: Build and start Python app
      run: |
        cd python_wordstop
        python wordstop.py &
        echo "Waiting for Python app to start..."
        sleep 10

    # SAST Scan with Trivy
    - name: Run Trivy vulnerability scanner in fs mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    # Upload Trivy scan results to GitHub Security tab
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    # Run OWASP ZAP DAST Scan
    - name: ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.9.0
      with:
        target: 'http://localhost:5000'
        fail_action: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.7.0
      with:
        target: 'http://localhost:5000'
        fail_action: false
        token: ${{ secrets.GITHUB_TOKEN }}
        
    # Run SonarQube Scanner
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=vulnerable-test-app
          -Dsonar.sources=.
          -Dsonar.python.version=3.12
          -Dsonar.java.binaries=.

    # Generate Security Report
    - name: Generate Security Report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "## SAST Findings (Trivy)" >> security-report.md
        if [ -f trivy-results.sarif ]; then
          echo "\`\`\`" >> security-report.md
          cat trivy-results.sarif | jq -r '.runs[].results[] | "- " + .ruleId + ": " + .message.text' >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
        echo "## DAST Findings (OWASP ZAP)" >> security-report.md
        if [ -f zap-baseline-report.md ]; then
          cat zap-baseline-report.md >> security-report.md
        fi

    # Upload Security Report
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          security-report.md
          trivy-results.sarif
          zap-*-report.*
