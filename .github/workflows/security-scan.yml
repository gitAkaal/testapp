name: Security Scan (SAST & DAST)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  bandit-scan:
    name: Bandit SAST Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run Bandit SAST scan
        run: |
          echo "=== Python Security Scan with Bandit ==="
          bandit -r python_wordstop/ -f txt --exit-zero || true
          echo "========================================"

  trivy-scan:
    name: Trivy SAST Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v3

    # SAST Scan with Trivy
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: '/dev/stdout'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'
    
    # Print Trivy Summary
    - name: Print Trivy Scan Summary
      run: |
        echo "Trivy scan completed. Check the logs above for results."

  zap-scan:
    name: ZAP DAST Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v3

    # Setup Python and start Flask app
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Flask
      run: |
        python -m pip install --upgrade pip
        pip install flask

    - name: Start Flask App
      run: |
        cd python_wordstop
        nohup python -m flask run --host=0.0.0.0 &
        echo "Waiting for Flask to start..."
        timeout=30
        while ! curl -s http://localhost:5000 > /dev/null && [ $timeout -gt 0 ]; do
          sleep 1
          timeout=$((timeout-1))
          echo "Waiting... ($timeout seconds left)"
        done
        if ! curl -s http://localhost:5000 > /dev/null; then
          echo "Flask app failed to start"
          exit 1
        fi
        echo "Flask app is running"

    # Run OWASP ZAP DAST Scan with Full Active and Passive Scanning
    - name: Run ZAP Full Scan
      run: |
        docker pull ghcr.io/zaproxy/zaproxy:stable
        docker run --network host \
          -v ${PWD}:/zap/wrk/:rw \
          --user root \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-full-scan.py \
          -t http://localhost:5000 \
          -I \
          -j \
          -m 10 \
          -z "-config api.disablekey=true -config scanner.attackOnStart=true -config scanner.threadPerHost=5 -config view.mode=attack -config api.addrs.addr.regex=true -config api.addrs.addr.name=.* -config database.recoverylog=false -addoninstall ascanrulesAlpha -addoninstall ascanrulesBeta"

    # Print ZAP Summary
    - name: Print ZAP Scan Summary
      run: |
        echo "ZAP DAST scan completed. Check the logs above for results."
